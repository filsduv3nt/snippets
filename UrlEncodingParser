    public class UrlEncodingParser : IDictionary<string, string>
    {

        /// <summary>
        /// Holds the original Url that was assigned if any
        /// Url must contain // to be considered a url
        /// </summary>
        private string Url { get; set; }

        private Hashtable _hashTable = new Hashtable();

        public ICollection<string> Keys 
            => _hashTable.Keys.Cast<string>().ToList();

        public ICollection<string> Values 
            => _hashTable.Values.Cast<string>().ToList();

        public int Count 
            => _hashTable.Count;

        public bool IsReadOnly 
            => _hashTable.IsReadOnly;

        public bool IsEmpty
            => (_hashTable?.Count ?? 0) == 0;

        public string this[string key] 
        { 
            get => (string)_hashTable[key]; 
            set => _hashTable[key] = value; 
        }

        /// <summary>
        /// Always pass in a UrlEncoded data or a URL to parse from
        /// unless you are creating a new one from scratch.
        /// </summary>
        /// <param name="queryStringOrUrl">
        /// Pass a query string or raw Form data, or a full URL.
        /// If a URL is parsed the part prior to the ? is stripped
        /// but saved. Then when you write the original URL is 
        /// re-written with the new query string.
        /// </param>
        public UrlEncodingParser(string queryStringOrUrl = null, bool parseOnlyQueryString = false)
        {
            Url = string.Empty;

            if (!string.IsNullOrEmpty(queryStringOrUrl))
            {
                if (parseOnlyQueryString)
                    ParseOnlyQueryString(queryStringOrUrl);
                else
                    Parse(queryStringOrUrl);
            }
        }


        /// <summary>
        /// Assigns multiple values to the same key
        /// </summary>
        /// <param name="key"></param>
        /// <param name="values"></param>
        public void SetValues(string key, IEnumerable<string> values)
        {
            foreach (var val in values)
                Add(key, val);
        }

        /// <summary>
        /// Parses the query string into the internal dictionary
        /// and optionally also returns this dictionary
        /// </summary>
        /// <param name="query">
        /// Query string key value pairs or a full URL. If URL is
        /// passed the URL is re-written in Write operation
        /// </param>
        /// <returns></returns>
        public IDictionary<string, string> Parse(string query)
        {
            if (Uri.IsWellFormedUriString(query, UriKind.Absolute))
                Url = query;

            if (string.IsNullOrEmpty(query))
                Clear();
            else
            {
                int index = query.IndexOf('?');
                if (index > -1)
                {
                    if (query.Length >= index + 1)
                        query = query.Substring(index + 1);
                }

                var pairs = query.Split('&');
                foreach (var pair in pairs)
                {
                    int index2 = pair.IndexOf('=');
                    if (index2 > 0)
                    {
                        Add(pair.Substring(0, index2), pair.Substring(index2 + 1));
                    }
                }
            }

            return this;
        }

        /// <summary>
        /// Parses the query string into the internal dictionary
        /// and optionally also returns this dictionary
        /// </summary>
        /// <param name="query">
        /// Query string key value pairs or a full URL. If URL is
        /// passed the URL is re-written in Write operation
        /// </param>
        /// <returns></returns>
        public IDictionary<string, string> ParseOnlyQueryString(string query)
        {
            if (string.IsNullOrEmpty(query))
                Clear();
            else
            {
                var pairs = query.Split('&');
                foreach (var pair in pairs)
                {
                    int index2 = pair.IndexOf('=');
                    if (index2 > 0)
                    {
                        Add(pair.Substring(0, index2), pair.Substring(index2 + 1));
                    }
                }
            }

            return this;
        }

        /// <summary>
        /// Writes out the urlencoded data/query string or full URL based 
        /// on the internally set values.
        /// </summary>
        /// <returns>urlencoded data or url</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            if (!string.IsNullOrEmpty(Url))
            {
                if (Url.Contains("?"))
                    sb.Append(Url.Substring(0, Url.IndexOf('?') + 1));
                else
                    sb.AppendFormat("{0}?", Url);
            }

            foreach (var item in this)
                sb.Append($"{item.Key}={Uri.EscapeUriString(item.Value)}&");

            return sb.ToString().Trim('&');
        }

        public IEnumerable<string> GetValues(string key = null)
        {
            if (key != null)
            {
                foreach (var item in this.Where(i => i.Key == key))
                    yield return item.Value;
            }
            else
            {
                foreach (var item in this)
                    yield return item.Value;
            }
        }

        public void Add(string key, string value)
            => _hashTable.Add(key, value);

        public bool ContainsKey(string key)
            => _hashTable.ContainsKey(key);

        public bool Remove(string key)
        {
            if (_hashTable.ContainsKey(key))
            {
                _hashTable.Remove(key);
                return true;
            }

            return false;
        }

        public bool TryGetValue(string key, out string value)
        {
            if (!_hashTable.ContainsKey(key))
            {
                value = null;
                return false;
            }

            value = (string)_hashTable[key];
            return true;
        }

        public void Add(KeyValuePair<string, string> item)
            => _hashTable.Add(item.Key, item.Value);

        public void Clear()
            => _hashTable.Clear();

        public bool Contains(KeyValuePair<string, string> item)
            => _hashTable.ContainsKey(item.Key) && _hashTable.ContainsValue(item.Value);

        public void CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
        {
            throw new NotImplementedException();
        }

        public bool Remove(KeyValuePair<string, string> item)
        {
            if (_hashTable.ContainsKey(item.Key))
            {
                _hashTable.Remove(item.Key);
                return true;
            }

            return false;
        }

        public IEnumerator<KeyValuePair<string, string>> GetEnumerator()
            => _hashTable.Cast<KeyValuePair<string, string>>().GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator()
            => _hashTable.Cast<KeyValuePair<string, string>>().GetEnumerator();
    }
